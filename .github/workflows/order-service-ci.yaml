name: CI for order service
on:
  pull_request:
    branches: [ "main" ] # do tests on prs on main

  push:
    branches: [ "main" ]
env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/orders-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Start Google Firestore emulator
      run: |
        docker run -d \
          --name firestore-emulator \
          -p 8085:8085 \
          gcr.io/google.com/cloudsdktool/cloud-sdk:emulators \
          gcloud beta emulators firestore start --host-port=0.0.0.0:8085
    
    - name: Wait for Firestore emulator
      run: |
        echo "Waiting for Firestore emulator to be ready..."
        sudo apt-get update && sudo apt-get install -y curl
        timeout 60s bash -c 'until curl -f http://localhost:8085; do sleep 2; done'
        echo "Firestore emulator is ready!"
    
    - name: Install dependencies (orders)
      working-directory: order-service
      run: |
        python -m pip install -r app/requirements/dev.txt
    
    - name: Lint & Unit Test (orders)
      working-directory: order-service
      env:
        FIRESTORE_EMULATOR_HOST: localhost:8085
        GCLOUD_PROJECT: test-project
      run: |
        pytest -q
    
    - name: Clean up
      if: always()
      run: docker rm -f firestore-emulator
  
  build:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./order-service 
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max