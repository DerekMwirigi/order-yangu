name: CI for order service
on:
  pull_request:
    branches: [ "main" ] # do tests on prs on main

  push:
    branches: [ "main" ]
  
env:
  GCP_PROJECT_ID: 'order-yangu-470223'
  GCP_REGION: 'us-central1'
  GCP_ARTIFACT_REPO: 'order-yangu'

  IMAGE_NAME: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REPO }}/order-service-app
  
  TF_STATE_RESOURCE_NAME: 'google_cloud_run_v2_service.order_service'

jobs:
  test-order-service:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Start Google Firestore emulator
      run: |
        docker run -d \
          --name firestore-emulator \
          -p 8085:8085 \
          gcr.io/google.com/cloudsdktool/cloud-sdk:emulators \
          gcloud beta emulators firestore start --host-port=0.0.0.0:8085
    
    - name: Wait for Firestore emulator
      run: |
        echo "Waiting for Firestore emulator to be ready..."
        sudo apt-get update && sudo apt-get install -y curl
        timeout 60s bash -c 'until curl -f http://localhost:8085; do sleep 2; done'
        echo "Firestore emulator is ready!"
    
    - name: Install dependencies (orders)
      working-directory: order-service
      run: |
        python -m pip install -r app/requirements/dev.txt
    
    - name: Lint & Unit Test (orders)
      working-directory: order-service
      env:
        FIRESTORE_EMULATOR_HOST: localhost:8085
        GCLOUD_PROJECT: test-project
      run: |
        pytest -q
    
    - name: Clean up
      if: always()
      run: docker rm -f firestore-emulator
  
  build-order-service:
    needs: test-order-service
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    outputs: # Used in deployment action
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }} 

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./order-service 
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy-order-service:
    needs: build-order-service
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCLOUD_AUTH }}'
      
      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0
      
      - name: 'Terraform Init'
        run: terraform init
        working-directory: ./iac
      
      - name: 'Terraform Apply Order Service'
        run: |
          terraform apply -auto-approve \
            -target="${{ env.TF_STATE_RESOURCE_NAME }}" \
            -target="google_cloud_run_domain_mapping.order_service_domain" \
            -var="order_service_tag=${{ needs.build-order-service.outputs.image_tag }}" 
        working-directory: ./iac